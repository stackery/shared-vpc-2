AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  sharedVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName}
            - ResourceName: sharedVPC
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1
            - ResourceName: sharedVPC
      VpcId: !Ref sharedVPC
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2
            - ResourceName: sharedVPC
      VpcId: !Ref sharedVPC
    Condition: sharedVPCCreateNewResource
  sharedVPCPublicSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 1
            - ResourceName: sharedVPC
      VpcId: !Ref sharedVPC
    Condition: sharedVPCCreateNewResource
  sharedVPCPublicSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 2
            - ResourceName: sharedVPC
      VpcId: !Ref sharedVPC
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet1NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet1NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt sharedVPCPrivateSubnet1NatGatewayEIP.AllocationId
      SubnetId: !Ref sharedVPCPublicSubnet1
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet1RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1 Route Table
            - ResourceName: sharedVPC
      VpcId: !Ref sharedVPC
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet1NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref sharedVPCPrivateSubnet1NatGateway
      RouteTableId: !Ref sharedVPCPrivateSubnet1RouteTable
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref sharedVPCPrivateSubnet1RouteTable
      SubnetId: !Ref sharedVPCPrivateSubnet1
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet2NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet2NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt sharedVPCPrivateSubnet2NatGatewayEIP.AllocationId
      SubnetId: !Ref sharedVPCPublicSubnet2
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet2RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2 Route Table
            - ResourceName: sharedVPC
      VpcId: !Ref sharedVPC
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet2NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref sharedVPCPrivateSubnet2NatGateway
      RouteTableId: !Ref sharedVPCPrivateSubnet2RouteTable
    Condition: sharedVPCCreateNewResource
  sharedVPCPrivateSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref sharedVPCPrivateSubnet2RouteTable
      SubnetId: !Ref sharedVPCPrivateSubnet2
    Condition: sharedVPCCreateNewResource
  sharedVPCPublicSubnetsInternetGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Internet Gateway
            - ResourceName: sharedVPC
    Condition: sharedVPCCreateNewResource
  sharedVPCPublicSubnetsInternetGatewayAttachment:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref sharedVPCPublicSubnetsInternetGateway
      VpcId: !Ref sharedVPC
    Condition: sharedVPCCreateNewResource
  sharedVPCPublicSubnetsRouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Route Table
            - ResourceName: sharedVPC
      VpcId: !Ref sharedVPC
    Condition: sharedVPCCreateNewResource
  sharedVPCPublicSubnetsInternetGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref sharedVPCPublicSubnetsInternetGateway
      RouteTableId: !Ref sharedVPCPublicSubnetsRouteTable
    Condition: sharedVPCCreateNewResource
  sharedVPCPublicSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref sharedVPCPublicSubnetsRouteTable
      SubnetId: !Ref sharedVPCPublicSubnet1
    Condition: sharedVPCCreateNewResource
  sharedVPCPublicSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref sharedVPCPublicSubnetsRouteTable
      SubnetId: !Ref sharedVPCPublicSubnet2
    Condition: sharedVPCCreateNewResource
  sharedVPCExistingResource:
    Type: Custom::StackeryExistingResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: virtualNetwork
      Data: !Ref EnvConfigVPCCONFIGAsString
    Condition: sharedVPCUseExistingResource
  sharedRDS:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref sharedRDSSubnetGroup
      Engine: aurora
      EngineMode: serverless
      MasterUsername: root
      MasterUserPassword: !Ref EnvConfigDBROOTPASSWORDAsString
      ScalingConfiguration:
        AutoPause: false
        MinCapacity: 2
        MaxCapacity: 256
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref sharedRDSSecurityGroup
    Condition: sharedRDSCreateNewResource
  sharedRDSExistingResource:
    Type: Custom::StackeryExistingResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: database
      Data: !Ref EnvConfigDBARNAsString
    Condition: sharedRDSUseExistingResource
  sharedRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: sharedRDS
      SubnetIds:
        - !If
          - sharedVPCUseExistingResource
          - !GetAtt sharedVPCExistingResource.PrivateSubnet1
          - !Ref sharedVPCPrivateSubnet1
        - !If
          - sharedVPCUseExistingResource
          - !GetAtt sharedVPCExistingResource.PrivateSubnet2
          - !Ref sharedVPCPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: sharedRDS
    Condition: sharedRDSCreateNewResource
  sharedRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: sharedRDS
      VpcId: !If
        - sharedVPCUseExistingResource
        - !Ref sharedVPCExistingResource
        - !Ref sharedVPC
    Condition: sharedRDSCreateNewResource
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvConfigVPCCONFIGAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/VPC_CONFIG
  EnvConfigDBROOTPASSWORDAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/DB_ROOT_PASSWORD
  EnvConfigDBARNAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/DB_ARN
Conditions:
  sharedVPCCreateNewResource: !Equals
    - 'false'
    - !Ref EnvConfigVPCCONFIGAsString
  sharedVPCUseExistingResource: !Not
    - Condition: sharedVPCCreateNewResource
  sharedRDSUseExistingResource: !Not
    - Condition: sharedRDSCreateNewResource
  sharedRDSCreateNewResource: !Equals
    - 'false'
    - !Ref EnvConfigDBARNAsString
Metadata:
  EnvConfigParameters:
    EnvConfigVPCCONFIGAsString: VPC_CONFIG
    EnvConfigDBROOTPASSWORDAsString: DB_ROOT_PASSWORD
    EnvConfigDBARNAsString: DB_ARN